{"version":3,"sources":["InfoBox.js","util.js","Map.js","DarkMap.js","Table.js","LineGraph.js","models/TypeWriter.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","isGreen","isOrange","isRed","active","onClick","theme","useTheme","Card","className","palette","type","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","caseType","topFiveCountries","slice","map","e","countryInfo","iso3","country","index","Circle","center","lat","long","key","fillOpacity","fillColor","radius","Math","sqrt","includes","Popup","style","backgroundImage","flag","SetViewOnClick","coords","zoom","useMap","setView","Map","countries","casesType","minZoom","fullscreenControl","bounceAtZoomLimits","maxBoundsViscosity","maxBounds","TileLayer","url","DarkMap","Table","LineGraph","props","useState","setData","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","time","parser","tooltipFormat","gridLines","drawOnChartArea","yAxes","ticks","callback","values","chart","document","getElementById","ctx","getContext","gradient","createLinearGradient","addColorStop","useEffect","fetch","then","response","json","chartData","buildChartData","fetchData","lastDataPoint","date","newDataPoint","x","y","abs","push","length","id","datasets","backgroundColor","borderColor","TypeWriter","txtElement","words","wait","this","txt","wordIndex","parseInt","isDeleting","current","fullTxt","substring","innerHTML","typeSpeed","setTimeout","withWidth","withStyles","withTheme","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","width","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","darkState","setDarkState","palleteType","createMuiTheme","name","iso2","getCountriesData","addEventListener","querySelector","JSON","parse","getAttribute","onCountryChange","event","countryCode","target","ThemeProvider","data-wait","data-words","ToggleButton","position","right","selected","onChange","FormControl","Select","variant","MenuItem","todayCases","todayRecovered","todayDeaths","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","href","origin","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4c0cb29d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\nimport { useTheme } from '@material-ui/core/styles';\r\n\r\nfunction InfoBox ( {\r\n  title,\r\n  cases,\r\n  total,\r\n  isGreen,\r\n  isOrange,\r\n  isRed,\r\n  active,\r\n  onClick\r\n} ) {\r\n  const theme = useTheme();\r\n  return (\r\n    <Card\r\n      className={ `infoBox ${ active && \"infoBox--selected\" } ${ isRed && \"infoBox--red\"\r\n        } ${ isGreen && \"infoBox--green\" } ${ isOrange && \"infoBox--orange\" } ${ theme.palette.type === 'dark' && 'dark--stats' }` }\r\n      onClick={ onClick }\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" className={ theme.palette.type === 'dark' ? \"infoBox__title dark--title\" : 'infoBox__title' }>\r\n          { title }\r\n        </Typography>\r\n\r\n        <h2\r\n          className={ `infoBox__cases ${ isRed && \"infoBox__cases--red\" } ${ isGreen && \"infoBox__cases--green\"\r\n            } ${ isOrange && \"infoBox__cases--orange\" }` }\r\n        >\r\n          { cases }\r\n        </h2>\r\n\r\n        <Typography color=\"textSecondary\" className={ theme.palette.type === 'dark' ? \"infoBox__total dark--total\" : 'infoBox__total' }>\r\n          { total } Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup, useMap } from \"react-leaflet\";\r\n\r\n\r\nexport const casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204,16,52)\",\r\n    half_op: \"rgba(204,16,52,0.5)\",\r\n    multiplier: 300,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125,215,29)\",\r\n    half_op: \"rgba(125,215,29,0.5)\",\r\n    multiplier: 400,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(258,68,67)\",\r\n    half_op: \"rgba(258,68,67,0.5)\",\r\n    multiplier: 1200,\r\n  }\r\n};\r\n\r\nexport const sortData = ( data ) => {\r\n  const sortedData = [ ...data ];\r\n  sortedData.sort( ( a, b ) => {\r\n    if ( a.cases > b.cases ) return -1;\r\n    return 1;\r\n  } );\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = ( stat ) =>\r\n  stat ? `+${ numeral( stat ).format( \"0.0a\" ) }` : \"+0\";\r\n\r\nexport const showDataOnMap = ( data, caseType, theme ) => {\r\n\r\n  data.sort( ( a, b ) => {\r\n    if ( a[ caseType ] > b[ caseType ] ) return -1;\r\n    return 1;\r\n  } );\r\n\r\n  const topFiveCountries = data.slice( 0, 5 ).map( ( e ) => e.countryInfo.iso3 );\r\n\r\n  return data.map( ( country, index ) => {\r\n    return (\r\n      <Circle\r\n        center={ [ country.countryInfo.lat, country.countryInfo.long ] }\r\n        key={ `map-circle-${ caseType }-${ index }` }\r\n        fillOpacity={ 0.4 }\r\n        color={ casesTypeColors[ caseType ].hex }\r\n        fillColor={ casesTypeColors[ caseType ].hex }\r\n        radius={ Math.sqrt( country[ caseType ] ) * casesTypeColors[ caseType ].multiplier }\r\n        className={ `${ topFiveCountries.includes( country.countryInfo.iso3 ) ? \"map__circle\" : null } ` }>\r\n\r\n        <Popup className={ theme === 'dark' ? 'dark--popup' : null }>\r\n          <div className=\"info-container\">\r\n            <div\r\n              className=\"info-flag\"\r\n              style={ { backgroundImage: `url(${ country.countryInfo.flag })` } }\r\n            ></div>\r\n            <div className={ theme === 'dark' ? 'info-name dark--name' : 'info-name' }>{ country.country }</div>\r\n            <div className={ theme === 'dark' ? \"info-cases dark--cases\" : \"info-cases\" }>\r\n              Cases: { numeral( country.cases ).format( \"0,0\" ) }\r\n            </div>\r\n            <div className={ theme === 'dark' ? \"info-recovered dark--recovered\" : \"info-recovered\" }>\r\n              Recovered: { numeral( country.recovered ).format( \"0,0\" ) }\r\n            </div>\r\n            <div className={ theme === 'dark' ? \"info-deaths dark--deaths\" : \"info-deaths\" }>\r\n              Deaths: { numeral( country.deaths ).format( \"0,0\" ) }\r\n            </div>\r\n          </div>\r\n        </Popup>\r\n      </Circle>\r\n    );\r\n  } );\r\n};\r\n\r\nexport function SetViewOnClick ( { coords, zoom } ) {\r\n  const map = useMap();\r\n  map.setView( coords, zoom );\r\n  return null;\r\n}","import React from \"react\";\r\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"leaflet-fullscreen/dist/Leaflet.fullscreen.js\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap, SetViewOnClick } from \"./util\";\r\nimport \"leaflet-fullscreen/dist/leaflet.fullscreen.css\";\r\nimport { useTheme } from '@material-ui/core/styles'\r\n\r\nfunction Map({ countries, casesType, center, zoom, minZoom }) {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <div className='map' >\r\n      <LeafletMap\r\n        fullscreenControl={true}\r\n        center={center}\r\n        zoom={zoom}\r\n        minZoom={minZoom}\r\n        bounceAtZoomLimits={true}\r\n        maxBoundsViscosity={.95}\r\n        maxBounds={[\r\n          [90, -180],\r\n          [-90, 180]\r\n        ]}\r\n      >\r\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n        {showDataOnMap(countries, casesType, theme.palette.type)}\r\n        <SetViewOnClick zoom={zoom} coords={center} />\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"leaflet-fullscreen/dist/Leaflet.fullscreen.js\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap, SetViewOnClick } from \"./util\";\r\nimport \"leaflet-fullscreen/dist/leaflet.fullscreen.css\";\r\nimport { useTheme } from '@material-ui/core/styles'\r\n\r\nfunction DarkMap ( { countries, casesType, center, zoom, minZoom } ) {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <div className='map dark--map' >\r\n      <LeafletMap\r\n        fullscreenControl={ true }\r\n        center={ center }\r\n        zoom={ zoom }\r\n        minZoom={ minZoom }\r\n        maxBounds={ [\r\n          [ 90, -180 ],\r\n          [ -90, 180 ]\r\n        ] }\r\n      >\r\n        <TileLayer url='https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png' />\r\n        { showDataOnMap( countries, casesType, theme.palette.type ) }\r\n        <SetViewOnClick zoom={ zoom } coords={ center } />\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DarkMap;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\nimport { useTheme } from '@material-ui/core/styles'\r\n\r\nfunction Table ( { countries } ) {\r\n  const theme = useTheme()\r\n\r\n  return (\r\n    <div className={ theme.palette.type === 'light' ? \"table\" : \"table dark--table\" }>\r\n      <table>\r\n        <tbody>\r\n          { countries.map( ( { country, cases }, index ) => {\r\n            return (\r\n              <tr key={ `table-country-${ index }` }>\r\n                <td>{ country }</td>\r\n                <td>\r\n                  <strong>{ numeral( cases ).format( \"0,0\" ) }</strong>\r\n                </td>\r\n              </tr>\r\n            );\r\n          } ) }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport numeral from 'numeral'\r\nimport { casesTypeColors } from './util'\r\n\r\nfunction LineGraph({ casesType = \"cases\", theme, ...props }) {\r\n  const [data, setData] = useState({})\r\n\r\n  const options = {\r\n    legend: {\r\n      display: false\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0\r\n      }\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\")\r\n        }\r\n      }\r\n    },\r\n    scales: {\r\n      xAxes: [{\r\n        type: \"time\",\r\n        time: {\r\n          parser: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\"\r\n        },\r\n        gridLines: {\r\n          drawOnChartArea: false,\r\n          color: theme === 'light' ? 'rgba(0,0,0,0.35)' : '#505050'\r\n        },\r\n      }],\r\n      yAxes: [{\r\n        gridLines: {\r\n          drawOnChartArea: false,\r\n          color: theme === 'light' ? 'rgba(0,0,0,0.35)' : '#505050'\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\")\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n\r\n  var chart = document.getElementById(\"chart\")\r\n  if (chart) {\r\n    var ctx = chart.getContext(\"2d\");\r\n\r\n    var gradient = ctx.createLinearGradient(0, 0, 0, 430);\r\n\r\n    if (casesType === \"cases\") {\r\n      gradient.addColorStop(0, 'rgba(204,16,52,1)');\r\n      gradient.addColorStop(0.1, 'rgba(204,16,52,0.8)');\r\n      gradient.addColorStop(0.2, 'rgba(204,16,52,0.7)');\r\n      gradient.addColorStop(0.3, 'rgba(204,16,52,0.6)');\r\n      theme === \"dark\" && gradient.addColorStop(0.6, '#303030');\r\n      theme === \"light\" && gradient.addColorStop(0.6, '#fff');\r\n    }\r\n    else if (casesType === \"deaths\") {\r\n      gradient.addColorStop(0, 'rgba(258,68,67,0.8)');\r\n      gradient.addColorStop(0.1, 'rgba(258,68,67,0.6)');\r\n      gradient.addColorStop(0.2, 'rgba(258,68,67,0.5)');\r\n      gradient.addColorStop(0.3, 'rgba(258,68,67,0.3)');\r\n      theme === \"dark\" && gradient.addColorStop(0.6, '#303030');\r\n      theme === \"light\" && gradient.addColorStop(0.6, '#fff');\r\n    }\r\n    else if (casesType === \"recovered\") {\r\n      gradient = ctx.createLinearGradient(0, 0, 0, 500);\r\n\r\n      gradient.addColorStop(0, 'rgba(125,215,29,0.8)');\r\n      gradient.addColorStop(0.1, 'rgba(125,215,29,0.6)');\r\n      gradient.addColorStop(0.2, 'rgba(125,215,29,0.5)');\r\n      gradient.addColorStop(0.3, 'rgba(125,215,29,0.3)');\r\n      theme === \"dark\" && gradient.addColorStop(0.6, '#303030');\r\n      theme === \"light\" && gradient.addColorStop(0.6, '#fff');\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=90\")\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          const chartData = buildChartData(data, casesType)\r\n          setData(chartData)\r\n        })\r\n    }\r\n    fetchData()\r\n\r\n  }, [casesType])\r\n\r\n  const buildChartData = (data, casesType = \"cases\") => {\r\n    const chartData = []\r\n    let lastDataPoint;\r\n\r\n    for (let date in data.cases) {\r\n      if (lastDataPoint) {\r\n        const newDataPoint = {\r\n          x: date,\r\n          y: Math.abs(data[casesType][date] - lastDataPoint)\r\n        }\r\n        chartData.push(newDataPoint)\r\n      }\r\n      lastDataPoint = data[casesType][date]\r\n    }\r\n    return chartData\r\n  }\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      { data?.length > 0 && <Line className=\"line__chart\" id=\"chart\"\r\n        options={options}\r\n        data={{\r\n          datasets: [{\r\n            // fillColor: gradient,\r\n            backgroundColor: gradient,\r\n            borderColor: `${casesTypeColors[casesType].hex}`,\r\n            data: data\r\n          }]\r\n        }}\r\n      />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LineGraph\r\n","export default class TypeWriter {\r\n\r\n    constructor(txtElement, words, wait = 3000) {\r\n        this.txtElement = txtElement;\r\n        this.words = words;\r\n        this.txt = '';\r\n        this.wordIndex = 0;\r\n        this.wait = parseInt(wait, 10);\r\n        this.type();\r\n        this.isDeleting = false;\r\n    }\r\n\r\n    type() {\r\n        // Current index of word\r\n        const current = this.wordIndex % this.words.length;\r\n        // Get full text of current word\r\n        const fullTxt = this.words[current];\r\n\r\n        // Check if deleting\r\n        if (this.isDeleting) {\r\n            // Remove char\r\n            this.txt = fullTxt.substring(0, this.txt.length - 1);\r\n        } else {\r\n            // Add char\r\n            this.txt = fullTxt.substring(0, this.txt.length + 1);\r\n        }\r\n\r\n        // Insert txt into element\r\n        this.txtElement.innerHTML = `<span className=\"app__header__text--txt\">${this.txt}</span>`;\r\n\r\n        // Initial Type Speed\r\n        let typeSpeed = 300;\r\n\r\n        if (this.isDeleting) {\r\n            typeSpeed /= 2;\r\n        }\r\n\r\n        // If word is complete\r\n        if (!this.isDeleting && this.txt === fullTxt) {\r\n            // Make pause at end\r\n            typeSpeed = this.wait;\r\n            // Set delete to true\r\n            this.isDeleting = true;\r\n        } else if (this.isDeleting && this.txt === '') {\r\n            this.isDeleting = false;\r\n            // Move to next word\r\n            this.wordIndex++;\r\n            // Pause before start typing\r\n            typeSpeed = 500;\r\n        }\r\n\r\n        setTimeout(() => this.type(), typeSpeed);\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n  CardContent,\r\n  withWidth\r\n} from \"@material-ui/core\";\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport { withStyles, createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport InfoBox from \"./InfoBox\";\r\nimport Map from \"./Map\";\r\nimport DarkMap from './DarkMap';\r\nimport Table from \"./Table\";\r\nimport LineGraph from \"./LineGraph\";\r\nimport { sortData, prettyPrintStat } from \"./util\";\r\nimport \"./App.css\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nimport TypeWriter from './models/TypeWriter'\r\n\r\nimport FlashOffSharpIcon from '@material-ui/icons/FlashOffSharp'\r\nimport FlashOnSharpIcon from '@material-ui/icons/FlashOnSharp';\r\n\r\nfunction App(props) {\r\n\r\n  const [countries, setCountries] = useState([]);\r\n  const [country, setCountry] = useState(\"worldwide\");\r\n  const [countryInfo, setCountryInfo] = useState({});\r\n  const [tableData, setTableData] = useState([]);\r\n  const [mapCenter, setMapCenter] = useState([0, 0]);\r\n  const [mapZoom, setMapZoom] = useState(props.width === \"xs\" ? 2 : 3);\r\n  const [mapCountries, setMapCountries] = useState([]);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n  const [darkState, setDarkState] = useState(false);\r\n\r\n  const palleteType = darkState ? \"dark\" : \"light\";\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      type: palleteType,\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v3/covid-19/all\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountryInfo(data);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getCountriesData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n          }));\r\n          const sortedData = sortData(data);\r\n          setTableData(sortedData);\r\n          setMapCountries(data);\r\n          setCountries(countries);\r\n        });\r\n    };\r\n    getCountriesData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('DOMContentLoaded', init);\r\n\r\n    // Init App\r\n    function init() {\r\n      const txtElement = document.querySelector('.app__header__text--type');\r\n      const words = JSON.parse(txtElement.getAttribute('data-words'));\r\n      const wait = txtElement.getAttribute('data-wait');\r\n      // Init TypeWriter\r\n      new TypeWriter(txtElement, words, wait);\r\n    }\r\n  }, [])\r\n\r\n  const onCountryChange = async (event) => {\r\n    let countryCode = event.target.value;\r\n    setCountry(countryCode);\r\n\r\n    const url =\r\n      countryCode === \"worldwide\"\r\n        ? \"https://disease.sh/v3/covid-19/all\"\r\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n    await fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (countryCode === \"worldwide\") setMapCenter([0, 0]);\r\n        else setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\r\n        setCountryInfo(data);\r\n        if (countryCode === \"worldwide\")\r\n          setMapZoom(props.width === 'xs' ? 2 : 3)\r\n        else\r\n          setMapZoom(props.width === 'xs' ? 3 : 5)\r\n      });\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className={theme.palette.type === 'dark' ? `${props.width === 'lg' ? 'app dark--main' : 'app--small dark--main'}` : `${props.width === 'lg' ? 'app' : 'app--small'}`}>\r\n        <div className=\"app__left\">\r\n          <div className=\"app__header\">\r\n            <h1 className={`app__header__text app__header__text--color-${casesType}`}>\r\n              COVID-19&nbsp;\r\n            <span className=\"app__header__text--type\" data-wait=\"3000\"\r\n                data-words='[\"Tracker\", \"Confirmed Cases\", \"Recovered Cases\" , \"Death Cases\"]'></span>\r\n            </h1>\r\n\r\n            <ToggleButton\r\n              style={{\r\n                position: 'absolute',\r\n                right: '9em'\r\n              }}\r\n              value={darkState}\r\n              selected={darkState}\r\n              onChange={() => setDarkState(!darkState)}\r\n              className=\"app__toggle--margin\"\r\n            >\r\n              {darkState && <FlashOnSharpIcon />}\r\n              {!darkState && <FlashOffSharpIcon />}\r\n            </ToggleButton>\r\n\r\n            <FormControl className={theme.palette.type === 'light' ? \"app__dropdown\" : \"app__dropdown dark--dropdown\"}>\r\n              <Select\r\n                variant=\"outlined\"\r\n                value={country}\r\n                className={theme.palette.type === 'light' ? \"select\" : \"select dark--select\"}\r\n                onChange={onCountryChange}\r\n              >\r\n                <MenuItem value=\"worldwide\">WorldWide</MenuItem>\r\n                {countries.map((country, index) => (\r\n                  <MenuItem\r\n                    key={`country-dropdown-${index}`}\r\n                    value={country.value}>\r\n                    {country.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n\r\n          <div className=\"app__stats\" >\r\n            <InfoBox\r\n              isRed\r\n              active={casesType === \"cases\"}\r\n              title=\"Cases\"\r\n              cases={prettyPrintStat(countryInfo.todayCases)}\r\n              total={prettyPrintStat(countryInfo.cases)}\r\n              onClick={() => setCasesType(\"cases\")}\r\n            />\r\n            <InfoBox\r\n              isGreen\r\n              active={casesType === \"recovered\"}\r\n              title=\"Recovered\"\r\n              cases={prettyPrintStat(countryInfo.todayRecovered)}\r\n              total={prettyPrintStat(countryInfo.recovered)}\r\n              onClick={() => setCasesType(\"recovered\")}\r\n            />\r\n            <InfoBox\r\n              isOrange\r\n              active={casesType === \"deaths\"}\r\n              title=\"Deaths\"\r\n              cases={prettyPrintStat(countryInfo.todayDeaths)}\r\n              total={prettyPrintStat(countryInfo.deaths)}\r\n              onClick={() => setCasesType(\"deaths\")}\r\n            />\r\n          </div>\r\n\r\n          {theme.palette.type === 'light' ? <Map\r\n            center={mapCenter}\r\n            zoom={mapZoom}\r\n            countries={mapCountries}\r\n            casesType={casesType}\r\n            minZoom={mapZoom}\r\n          /> : <DarkMap\r\n              center={mapCenter}\r\n              zoom={mapZoom}\r\n              countries={mapCountries}\r\n              casesType={casesType}\r\n              minZoom={mapZoom}\r\n            />}\r\n        </div>\r\n\r\n        <Card className={theme.palette.type === 'dark' ? 'app__right dark--right' : \"app__right\"}>\r\n          <CardContent>\r\n            <h3>LIVE CASES BY COUNTRY</h3>\r\n            <Table countries={tableData} />\r\n            <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\r\n            <LineGraph className=\"app__graph\" casesType={casesType} theme={theme.palette.type} />\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default withWidth()(withStyles({ withTheme: true })(App));\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById( \"root\" )\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}