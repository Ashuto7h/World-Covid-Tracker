{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","props","Card","className","active","isRed","isGreen","isOrange","onClick","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","minZoom","fullscreenControl","maxBounds","TileLayer","attribution","url","caseType","topFiveCountries","slice","map","e","countryInfo","iso3","country","index","Circle","lat","long","key","fillOpacity","fillColor","radius","Math","sqrt","includes","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","values","LineGraph","useState","setData","useEffect","fetch","then","response","json","chartData","buildChartData","fetchData","lastDataPoint","date","newDataPoint","x","y","push","length","datasets","backgroundColor","borderColor","withWidth","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","width","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3ecfb1aa.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\nimport './InfoBox.css'\r\n\r\nfunction InfoBox ( { title, cases, total, ...props } ) {\r\n  return (\r\n    <Card className={ `infoBox ${ props.active && \"infoBox--selected\" } ${ props.isRed && \"infoBox--red\" } ${ props.isGreen && \"infoBox--green\" } ${ props.isOrange && \"infoBox--orange\" }` } onClick={ props.onClick }>\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" className=\"infoBox__title\">{ title }</Typography>\r\n\r\n        <h2 className={ `infoBox__cases ${ props.isRed && \"infoBox__cases--red\" } ${ props.isGreen && \"infoBox__cases--green\" } ${ props.isOrange && \"infoBox__cases--orange\" }` }>{ cases }</h2>\r\n\r\n        <Typography color=\"textSecondary\" className=\"infoBox__total\">{ total } Total</Typography>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport { Circle, Popup } from 'react-leaflet'\r\n\r\nexport const casesTypeColors = {\r\n  cases: {\r\n    hex: '#CC1034',\r\n    rgb: 'rgb(204,16,52)',\r\n    half_op: 'rgba(204,16,52,0.5)',\r\n    multiplier: 800\r\n  },\r\n  recovered: {\r\n    hex: '#7dd71d',\r\n    rgb: 'rgb(125,215,29)',\r\n    half_op: 'rgba(125,215,29,0.5)',\r\n    multiplier: 1200\r\n  },\r\n  deaths: {\r\n    hex: '#fb4443',\r\n    rgb: 'rgb(258,68,67)',\r\n    half_op: 'rgba(258,68,67,0.5)',\r\n    multiplier: 2000\r\n  }\r\n}\r\n\r\nexport const sortData = data => {\r\n  const sortedData = [ ...data ]\r\n  sortedData.sort( ( a, b ) => {\r\n    if ( a.cases > b.cases ) return -1\r\n    return 1\r\n  } )\r\n  return sortedData\r\n}\r\n\r\nexport const prettyPrintStat = stat => stat ? `+${ numeral( stat ).format( \"0.0a\" ) }` : 0\r\n\r\nexport const showDataOnMap = ( data, caseType = 'cases' ) => {\r\n  // console.log( selectedCountry )\r\n  data.sort( ( a, b ) => {\r\n    if ( a[ caseType ] > b[ caseType ] ) return -1\r\n    return 1\r\n  } )\r\n  const topFiveCountries = data.slice( 0, 5 ).map( e => e.countryInfo.iso3 )\r\n  return data.map( ( country, index ) => {\r\n    return <Circle center={ [ country.countryInfo.lat, country.countryInfo.long ] } key={ `map-circle-${ index }` }\r\n      fillOpacity={ 0.4 }\r\n      color={ casesTypeColors[ caseType ].hex }\r\n      fillColor={ casesTypeColors[ caseType ].hex }\r\n      radius={ Math.sqrt( country[ caseType ] ) * casesTypeColors[ caseType ].multiplier }\r\n      className={ `${ topFiveCountries.includes( country.countryInfo.iso3 ) ? \"map__circle\" : null } ` }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div className=\"info-flag\" style={ { backgroundImage: `url(${ country.countryInfo.flag })` } }></div>\r\n          <div className=\"info-name\">{ country.country }</div>\r\n          <div className=\"info-cases\">Cases: { numeral( country.cases ).format( \"0,0\" ) }</div>\r\n          <div className=\"info-recovered\">Recovered: { numeral( country.recovered ).format( \"0,0\" ) }</div>\r\n          <div className=\"info-deaths\">Deaths: { numeral( country.deaths ).format( \"0,0\" ) }</div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  } )\r\n}","import React from 'react'\r\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet'\r\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen.js'\r\nimport './Map.css'\r\nimport { showDataOnMap } from './util'\r\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css'\r\n\r\n\r\nfunction Map ( { countries, casesType, center, zoom, minZoom, ...props } ) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap fullscreenControl={ true } center={ center } zoom={ zoom } minZoom={ minZoom } maxBounds={ [ [ 90, -180 ], [ -90, 180 ] ] }>\r\n        <TileLayer attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        { showDataOnMap( countries, casesType ) }\r\n      </LeafletMap>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from 'numeral'\r\n\r\nfunction Table ( { countries } ) {\r\n  return (\r\n    <div className=\"table\">\r\n      { countries.map( ( { country, cases }, index ) => {\r\n        return <tr key={ `table-country-${ index }` }>\r\n          <td>{ country }</td>\r\n          <td>\r\n            <strong>{ numeral( cases ).format( \"0,0\" ) }</strong>\r\n          </td>\r\n\r\n        </tr>\r\n      } ) }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport numeral from 'numeral'\r\nimport { casesTypeColors } from './util'\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0\r\n    }\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function ( tooltipItem, data ) {\r\n        return numeral( tooltipItem.value ).format( \"+0,0\" )\r\n      }\r\n    }\r\n  },\r\n  scales: {\r\n    xAxes: [ {\r\n      type: \"time\",\r\n      time: {\r\n        format: \"MM/DD/YY\",\r\n        tooltipFormat: \"ll\"\r\n      }\r\n    } ],\r\n    yAxes: [ {\r\n      gridLines: {\r\n        display: false\r\n      },\r\n      ticks: {\r\n        callback: function ( value, index, values ) {\r\n          return numeral( value ).format( \"0a\" )\r\n        }\r\n      }\r\n    } ]\r\n  }\r\n}\r\n\r\nfunction LineGraph ( { casesType = \"cases\", ...props } ) {\r\n  const [ data, setData ] = useState( {} )\r\n\r\n  useEffect( () => {\r\n    const fetchData = async () => {\r\n      await fetch( \"https://disease.sh/v3/covid-19/historical/all?lastdays=90\" )\r\n        .then( response => response.json() )\r\n        .then( data => {\r\n          const chartData = buildChartData( data, casesType )\r\n          setData( chartData )\r\n        } )\r\n    }\r\n    fetchData()\r\n  }, [ casesType ] )\r\n\r\n  const buildChartData = ( data, casesType = \"cases\" ) => {\r\n    const chartData = []\r\n    let lastDataPoint;\r\n\r\n    for ( let date in data.cases )\r\n    {\r\n      if ( lastDataPoint )\r\n      {\r\n        const newDataPoint = {\r\n          x: date,\r\n          y: data[ casesType ][ date ] - lastDataPoint\r\n        }\r\n        chartData.push( newDataPoint )\r\n      }\r\n      lastDataPoint = data[ casesType ][ date ]\r\n    }\r\n    return chartData\r\n  }\r\n\r\n  return (\r\n    <div className={ props.className }>\r\n      { data?.length > 0 && <Line className=\"line__chart\"\r\n        options={ options }\r\n        data={ {\r\n          datasets: [ {\r\n            backgroundColor: `${ casesTypeColors[ casesType ].half_op }`,\r\n            borderColor: `${ casesTypeColors[ casesType ].hex }`,\r\n            data: data\r\n          } ]\r\n        } }\r\n      /> }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useState, useEffect } from 'react';\nimport { Card, MenuItem, FormControl, Select, CardContent, withWidth } from '@material-ui/core'\nimport InfoBox from './InfoBox'\nimport Map from './Map'\nimport Table from './Table'\nimport LineGraph from './LineGraph'\nimport { sortData, prettyPrintStat } from './util'\nimport './App.css'\nimport \"leaflet/dist/leaflet.css\"\n\nfunction App ( props ) {\n  const [ countries, setCountries ] = useState( [] )\n  const [ country, setCountry ] = useState( \"worldwide\" )\n  const [ countryInfo, setCountryInfo ] = useState( {} )\n  const [ tableData, setTableData ] = useState( [] )\n  const [ mapCenter, setMapCenter ] = useState( [ 0, 0 ] )\n  const [ mapZoom, setMapZoom ] = useState( props.width === 'xs' ? 2 : 3 )\n  const [ mapCountries, setMapCountries ] = useState( [] )\n  const [ casesType, setCasesType ] = useState( \"cases\" )\n\n  useEffect( () => {\n    fetch( \"https://disease.sh/v3/covid-19/all\" )\n      .then( response => response.json() )\n      .then( data => {\n        setCountryInfo( data )\n      } )\n  }, [] )\n\n  useEffect( () => {\n    const getCountriesData = async () => {\n      await fetch( \"https://disease.sh/v3/covid-19/countries\" )\n        .then( response => response.json() )\n        .then( data => {\n          const countries = data.map( country => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2\n            }\n          ) )\n          const sortedData = sortData( data )\n          setTableData( sortedData )\n          setMapCountries( data )\n          setCountries( countries )\n        } )\n    }\n    getCountriesData()\n  }, [] )\n\n  const onCountryChange = async ( event ) => {\n    let countryCode = event.target.value\n    setCountry( countryCode )\n\n    const url = countryCode === 'worldwide' ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${ countryCode }`\n    await fetch( url )\n      .then( response => response.json() )\n      .then( data => {\n        if ( countryCode === 'worldwide' )\n          setMapCenter( [ 0, 0 ] )\n        else\n          setMapCenter( [ data.countryInfo.lat, data.countryInfo.long ] )\n        setCountryInfo( data )\n        setMapZoom( props.width === 'xs' ? 2 : 3 )\n      } )\n  }\n\n  return (\n    <div className=\"app\" >\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" value={ country } onChange={ onCountryChange }>\n              <MenuItem value=\"worldwide\">WorldWide</MenuItem>\n              { countries.map( ( country, index ) =>\n                <MenuItem key={ `country-dropdown-${ index }` } value={ country.value }>{ country.name }</MenuItem>\n              ) }\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox isRed active={ casesType === \"cases\" } title=\"Cases\" cases={ prettyPrintStat( countryInfo.todayCases ) } total={ prettyPrintStat( countryInfo.cases ) } onClick={ e => setCasesType( \"cases\" ) } />\n          <InfoBox isGreen active={ casesType === \"recovered\" } title=\"Recovered\" cases={ prettyPrintStat( countryInfo.todayRecovered ) } total={ prettyPrintStat( countryInfo.recovered ) } onClick={ e => setCasesType( \"recovered\" ) } />\n          <InfoBox isOrange active={ casesType === \"deaths\" } title=\"Deaths\" cases={ prettyPrintStat( countryInfo.todayDeaths ) } total={ prettyPrintStat( countryInfo.deaths ) } onClick={ e => setCasesType( \"deaths\" ) } />\n        </div>\n\n        <Map center={ mapCenter } zoom={ mapZoom } countries={ mapCountries } casesType={ casesType } minZoom={ mapZoom } />\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={ tableData } />\n          <h3 className=\"app__graphTitle\">Worldwide new { casesType }</h3>\n          <LineGraph className=\"app__graph\" casesType={ casesType } />\n        </CardContent>\n      </Card>\n\n    </div >\n  );\n}\n\nexport default withWidth()( App );\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}